/*
 * Pyrra
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.3.4
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type MultiBurnrateAlert struct {
	Labels map[string]string `json:"labels"`

	Severity string `json:"severity"`

	For int64 `json:"for"`

	Factor float64 `json:"factor"`

	Short Burnrate `json:"short"`

	Long Burnrate `json:"long"`

	State string `json:"state"`
}

// AssertMultiBurnrateAlertRequired checks if the required fields are not zero-ed
func AssertMultiBurnrateAlertRequired(obj MultiBurnrateAlert) error {
	elements := map[string]interface{}{
		"labels":   obj.Labels,
		"severity": obj.Severity,
		"for":      obj.For,
		"factor":   obj.Factor,
		"short":    obj.Short,
		"long":     obj.Long,
		"state":    obj.State,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertBurnrateRequired(obj.Short); err != nil {
		return err
	}
	if err := AssertBurnrateRequired(obj.Long); err != nil {
		return err
	}
	return nil
}

// AssertRecurseMultiBurnrateAlertRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of MultiBurnrateAlert (e.g. [][]MultiBurnrateAlert), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseMultiBurnrateAlertRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aMultiBurnrateAlert, ok := obj.(MultiBurnrateAlert)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertMultiBurnrateAlertRequired(aMultiBurnrateAlert)
	})
}
