/*
 * Pyrra
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.3.4
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type IndicatorRatio struct {
	Errors Query `json:"errors"`

	Total Query `json:"total"`

	Grouping []string `json:"grouping,omitempty"`
}

// AssertIndicatorRatioRequired checks if the required fields are not zero-ed
func AssertIndicatorRatioRequired(obj IndicatorRatio) error {
	elements := map[string]interface{}{
		"errors": obj.Errors,
		"total":  obj.Total,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertQueryRequired(obj.Errors); err != nil {
		return err
	}
	if err := AssertQueryRequired(obj.Total); err != nil {
		return err
	}
	return nil
}

// AssertRecurseIndicatorRatioRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of IndicatorRatio (e.g. [][]IndicatorRatio), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseIndicatorRatioRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aIndicatorRatio, ok := obj.(IndicatorRatio)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertIndicatorRatioRequired(aIndicatorRatio)
	})
}
