/*
 * Pyrra
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.3.4
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type ObjectiveStatus struct {
	Labels map[string]string `json:"labels,omitempty"`

	Availability ObjectiveStatusAvailability `json:"availability"`

	Budget ObjectiveStatusBudget `json:"budget"`
}

// AssertObjectiveStatusRequired checks if the required fields are not zero-ed
func AssertObjectiveStatusRequired(obj ObjectiveStatus) error {
	elements := map[string]interface{}{
		"availability": obj.Availability,
		"budget":       obj.Budget,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertObjectiveStatusAvailabilityRequired(obj.Availability); err != nil {
		return err
	}
	if err := AssertObjectiveStatusBudgetRequired(obj.Budget); err != nil {
		return err
	}
	return nil
}

// AssertRecurseObjectiveStatusRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ObjectiveStatus (e.g. [][]ObjectiveStatus), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseObjectiveStatusRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aObjectiveStatus, ok := obj.(ObjectiveStatus)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertObjectiveStatusRequired(aObjectiveStatus)
	})
}
