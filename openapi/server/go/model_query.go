/*
 * Pyrra
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.3.4
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type Query struct {
	Metric string `json:"metric"`

	Name string `json:"name,omitempty"`

	Matchers []QueryMatchers `json:"matchers,omitempty"`
}

// AssertQueryRequired checks if the required fields are not zero-ed
func AssertQueryRequired(obj Query) error {
	elements := map[string]interface{}{
		"metric": obj.Metric,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Matchers {
		if err := AssertQueryMatchersRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertRecurseQueryRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Query (e.g. [][]Query), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseQueryRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aQuery, ok := obj.(Query)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertQueryRequired(aQuery)
	})
}
