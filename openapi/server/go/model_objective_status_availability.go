/*
 * Pyrra
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.3.4
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type ObjectiveStatusAvailability struct {
	Percentage float64 `json:"percentage"`

	Total float64 `json:"total"`

	Errors float64 `json:"errors"`
}

// AssertObjectiveStatusAvailabilityRequired checks if the required fields are not zero-ed
func AssertObjectiveStatusAvailabilityRequired(obj ObjectiveStatusAvailability) error {
	elements := map[string]interface{}{
		"percentage": obj.Percentage,
		"total":      obj.Total,
		"errors":     obj.Errors,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseObjectiveStatusAvailabilityRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of ObjectiveStatusAvailability (e.g. [][]ObjectiveStatusAvailability), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseObjectiveStatusAvailabilityRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aObjectiveStatusAvailability, ok := obj.(ObjectiveStatusAvailability)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertObjectiveStatusAvailabilityRequired(aObjectiveStatusAvailability)
	})
}
