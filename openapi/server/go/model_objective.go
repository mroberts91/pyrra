/*
 * Pyrra
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.3.4
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

type Objective struct {
	Labels map[string]string `json:"labels"`

	Description string `json:"description"`

	Target float64 `json:"target"`

	Window int64 `json:"window"`

	Config string `json:"config"`

	Indicator Indicator `json:"indicator,omitempty"`
}

// AssertObjectiveRequired checks if the required fields are not zero-ed
func AssertObjectiveRequired(obj Objective) error {
	elements := map[string]interface{}{
		"labels":      obj.Labels,
		"description": obj.Description,
		"target":      obj.Target,
		"window":      obj.Window,
		"config":      obj.Config,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertIndicatorRequired(obj.Indicator); err != nil {
		return err
	}
	return nil
}

// AssertRecurseObjectiveRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Objective (e.g. [][]Objective), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseObjectiveRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aObjective, ok := obj.(Objective)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertObjectiveRequired(aObjective)
	})
}
