/*
Pyrra

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Indicator struct for Indicator
type Indicator struct {
	Ratio   *IndicatorRatio   `json:"ratio,omitempty"`
	Latency *IndicatorLatency `json:"latency,omitempty"`
}

// NewIndicator instantiates a new Indicator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndicator() *Indicator {
	this := Indicator{}
	return &this
}

// NewIndicatorWithDefaults instantiates a new Indicator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndicatorWithDefaults() *Indicator {
	this := Indicator{}
	return &this
}

// GetRatio returns the Ratio field value if set, zero value otherwise.
func (o *Indicator) GetRatio() IndicatorRatio {
	if o == nil || o.Ratio == nil {
		var ret IndicatorRatio
		return ret
	}
	return *o.Ratio
}

// GetRatioOk returns a tuple with the Ratio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Indicator) GetRatioOk() (*IndicatorRatio, bool) {
	if o == nil || o.Ratio == nil {
		return nil, false
	}
	return o.Ratio, true
}

// HasRatio returns a boolean if a field has been set.
func (o *Indicator) HasRatio() bool {
	if o != nil && o.Ratio != nil {
		return true
	}

	return false
}

// SetRatio gets a reference to the given IndicatorRatio and assigns it to the Ratio field.
func (o *Indicator) SetRatio(v IndicatorRatio) {
	o.Ratio = &v
}

// GetLatency returns the Latency field value if set, zero value otherwise.
func (o *Indicator) GetLatency() IndicatorLatency {
	if o == nil || o.Latency == nil {
		var ret IndicatorLatency
		return ret
	}
	return *o.Latency
}

// GetLatencyOk returns a tuple with the Latency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Indicator) GetLatencyOk() (*IndicatorLatency, bool) {
	if o == nil || o.Latency == nil {
		return nil, false
	}
	return o.Latency, true
}

// HasLatency returns a boolean if a field has been set.
func (o *Indicator) HasLatency() bool {
	if o != nil && o.Latency != nil {
		return true
	}

	return false
}

// SetLatency gets a reference to the given IndicatorLatency and assigns it to the Latency field.
func (o *Indicator) SetLatency(v IndicatorLatency) {
	o.Latency = &v
}

func (o Indicator) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ratio != nil {
		toSerialize["ratio"] = o.Ratio
	}
	if o.Latency != nil {
		toSerialize["latency"] = o.Latency
	}
	return json.Marshal(toSerialize)
}

type NullableIndicator struct {
	value *Indicator
	isSet bool
}

func (v NullableIndicator) Get() *Indicator {
	return v.value
}

func (v *NullableIndicator) Set(val *Indicator) {
	v.value = val
	v.isSet = true
}

func (v NullableIndicator) IsSet() bool {
	return v.isSet
}

func (v *NullableIndicator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndicator(val *Indicator) *NullableIndicator {
	return &NullableIndicator{value: val, isSet: true}
}

func (v NullableIndicator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndicator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
