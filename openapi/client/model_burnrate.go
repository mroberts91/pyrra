/*
Pyrra

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Burnrate struct for Burnrate
type Burnrate struct {
	Window  int64   `json:"window"`
	Current float64 `json:"current"`
	Query   string  `json:"query"`
}

// NewBurnrate instantiates a new Burnrate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBurnrate(window int64, current float64, query string) *Burnrate {
	this := Burnrate{}
	this.Window = window
	this.Current = current
	this.Query = query
	return &this
}

// NewBurnrateWithDefaults instantiates a new Burnrate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBurnrateWithDefaults() *Burnrate {
	this := Burnrate{}
	return &this
}

// GetWindow returns the Window field value
func (o *Burnrate) GetWindow() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Window
}

// GetWindowOk returns a tuple with the Window field value
// and a boolean to check if the value has been set.
func (o *Burnrate) GetWindowOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Window, true
}

// SetWindow sets field value
func (o *Burnrate) SetWindow(v int64) {
	o.Window = v
}

// GetCurrent returns the Current field value
func (o *Burnrate) GetCurrent() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Current
}

// GetCurrentOk returns a tuple with the Current field value
// and a boolean to check if the value has been set.
func (o *Burnrate) GetCurrentOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Current, true
}

// SetCurrent sets field value
func (o *Burnrate) SetCurrent(v float64) {
	o.Current = v
}

// GetQuery returns the Query field value
func (o *Burnrate) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *Burnrate) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *Burnrate) SetQuery(v string) {
	o.Query = v
}

func (o Burnrate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["window"] = o.Window
	}
	if true {
		toSerialize["current"] = o.Current
	}
	if true {
		toSerialize["query"] = o.Query
	}
	return json.Marshal(toSerialize)
}

type NullableBurnrate struct {
	value *Burnrate
	isSet bool
}

func (v NullableBurnrate) Get() *Burnrate {
	return v.value
}

func (v *NullableBurnrate) Set(val *Burnrate) {
	v.value = val
	v.isSet = true
}

func (v NullableBurnrate) IsSet() bool {
	return v.isSet
}

func (v *NullableBurnrate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBurnrate(val *Burnrate) *NullableBurnrate {
	return &NullableBurnrate{value: val, isSet: true}
}

func (v NullableBurnrate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBurnrate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
