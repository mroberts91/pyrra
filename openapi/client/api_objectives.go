/*
Pyrra

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)

// Linger please
var (
	_ context.Context
)

// ObjectivesApiService ObjectivesApi service
type ObjectivesApiService service

type ApiGetMultiBurnrateAlertsRequest struct {
	ctx        context.Context
	ApiService *ObjectivesApiService
	expr       *string
	grouping   *string
	inactive   *bool
	current    *bool
}

func (r ApiGetMultiBurnrateAlertsRequest) Expr(expr string) ApiGetMultiBurnrateAlertsRequest {
	r.expr = &expr
	return r
}
func (r ApiGetMultiBurnrateAlertsRequest) Grouping(grouping string) ApiGetMultiBurnrateAlertsRequest {
	r.grouping = &grouping
	return r
}
func (r ApiGetMultiBurnrateAlertsRequest) Inactive(inactive bool) ApiGetMultiBurnrateAlertsRequest {
	r.inactive = &inactive
	return r
}
func (r ApiGetMultiBurnrateAlertsRequest) Current(current bool) ApiGetMultiBurnrateAlertsRequest {
	r.current = &current
	return r
}

func (r ApiGetMultiBurnrateAlertsRequest) Execute() ([]MultiBurnrateAlert, *http.Response, error) {
	return r.ApiService.GetMultiBurnrateAlertsExecute(r)
}

/*
GetMultiBurnrateAlerts Get the MultiBurnrateAlerts for the Objective

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetMultiBurnrateAlertsRequest
*/
func (a *ObjectivesApiService) GetMultiBurnrateAlerts(ctx context.Context) ApiGetMultiBurnrateAlertsRequest {
	return ApiGetMultiBurnrateAlertsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return []MultiBurnrateAlert
func (a *ObjectivesApiService) GetMultiBurnrateAlertsExecute(r ApiGetMultiBurnrateAlertsRequest) ([]MultiBurnrateAlert, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []MultiBurnrateAlert
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectivesApiService.GetMultiBurnrateAlerts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/objectives/alerts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.expr == nil {
		return localVarReturnValue, nil, reportError("expr is required and must be specified")
	}

	localVarQueryParams.Add("expr", parameterToString(*r.expr, ""))
	if r.grouping != nil {
		localVarQueryParams.Add("grouping", parameterToString(*r.grouping, ""))
	}
	if r.inactive != nil {
		localVarQueryParams.Add("inactive", parameterToString(*r.inactive, ""))
	}
	if r.current != nil {
		localVarQueryParams.Add("current", parameterToString(*r.current, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetObjectiveErrorBudgetRequest struct {
	ctx        context.Context
	ApiService *ObjectivesApiService
	expr       *string
	grouping   *string
	start      *int32
	end        *int32
}

func (r ApiGetObjectiveErrorBudgetRequest) Expr(expr string) ApiGetObjectiveErrorBudgetRequest {
	r.expr = &expr
	return r
}
func (r ApiGetObjectiveErrorBudgetRequest) Grouping(grouping string) ApiGetObjectiveErrorBudgetRequest {
	r.grouping = &grouping
	return r
}

// The timestamp to start the query range at
func (r ApiGetObjectiveErrorBudgetRequest) Start(start int32) ApiGetObjectiveErrorBudgetRequest {
	r.start = &start
	return r
}

// The timestamp to end the query range at
func (r ApiGetObjectiveErrorBudgetRequest) End(end int32) ApiGetObjectiveErrorBudgetRequest {
	r.end = &end
	return r
}

func (r ApiGetObjectiveErrorBudgetRequest) Execute() (*QueryRange, *http.Response, error) {
	return r.ApiService.GetObjectiveErrorBudgetExecute(r)
}

/*
GetObjectiveErrorBudget Get ErrorBudget graph sample pairs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetObjectiveErrorBudgetRequest
*/
func (a *ObjectivesApiService) GetObjectiveErrorBudget(ctx context.Context) ApiGetObjectiveErrorBudgetRequest {
	return ApiGetObjectiveErrorBudgetRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return QueryRange
func (a *ObjectivesApiService) GetObjectiveErrorBudgetExecute(r ApiGetObjectiveErrorBudgetRequest) (*QueryRange, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *QueryRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectivesApiService.GetObjectiveErrorBudget")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/objectives/errorbudget"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.expr == nil {
		return localVarReturnValue, nil, reportError("expr is required and must be specified")
	}

	localVarQueryParams.Add("expr", parameterToString(*r.expr, ""))
	if r.grouping != nil {
		localVarQueryParams.Add("grouping", parameterToString(*r.grouping, ""))
	}
	if r.start != nil {
		localVarQueryParams.Add("start", parameterToString(*r.start, ""))
	}
	if r.end != nil {
		localVarQueryParams.Add("end", parameterToString(*r.end, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetObjectiveStatusRequest struct {
	ctx        context.Context
	ApiService *ObjectivesApiService
	expr       *string
	grouping   *string
}

func (r ApiGetObjectiveStatusRequest) Expr(expr string) ApiGetObjectiveStatusRequest {
	r.expr = &expr
	return r
}
func (r ApiGetObjectiveStatusRequest) Grouping(grouping string) ApiGetObjectiveStatusRequest {
	r.grouping = &grouping
	return r
}

func (r ApiGetObjectiveStatusRequest) Execute() ([]ObjectiveStatus, *http.Response, error) {
	return r.ApiService.GetObjectiveStatusExecute(r)
}

/*
GetObjectiveStatus Get objective status

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetObjectiveStatusRequest
*/
func (a *ObjectivesApiService) GetObjectiveStatus(ctx context.Context) ApiGetObjectiveStatusRequest {
	return ApiGetObjectiveStatusRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return []ObjectiveStatus
func (a *ObjectivesApiService) GetObjectiveStatusExecute(r ApiGetObjectiveStatusRequest) ([]ObjectiveStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ObjectiveStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectivesApiService.GetObjectiveStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/objectives/status"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.expr == nil {
		return localVarReturnValue, nil, reportError("expr is required and must be specified")
	}

	localVarQueryParams.Add("expr", parameterToString(*r.expr, ""))
	if r.grouping != nil {
		localVarQueryParams.Add("grouping", parameterToString(*r.grouping, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetREDErrorsRequest struct {
	ctx        context.Context
	ApiService *ObjectivesApiService
	expr       *string
	grouping   *string
	start      *int32
	end        *int32
}

func (r ApiGetREDErrorsRequest) Expr(expr string) ApiGetREDErrorsRequest {
	r.expr = &expr
	return r
}
func (r ApiGetREDErrorsRequest) Grouping(grouping string) ApiGetREDErrorsRequest {
	r.grouping = &grouping
	return r
}

// The timestamp to start the query range at
func (r ApiGetREDErrorsRequest) Start(start int32) ApiGetREDErrorsRequest {
	r.start = &start
	return r
}

// The timestamp to end the query range at
func (r ApiGetREDErrorsRequest) End(end int32) ApiGetREDErrorsRequest {
	r.end = &end
	return r
}

func (r ApiGetREDErrorsRequest) Execute() (*QueryRange, *http.Response, error) {
	return r.ApiService.GetREDErrorsExecute(r)
}

/*
GetREDErrors Get a matrix of error percentage by label

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetREDErrorsRequest
*/
func (a *ObjectivesApiService) GetREDErrors(ctx context.Context) ApiGetREDErrorsRequest {
	return ApiGetREDErrorsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return QueryRange
func (a *ObjectivesApiService) GetREDErrorsExecute(r ApiGetREDErrorsRequest) (*QueryRange, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *QueryRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectivesApiService.GetREDErrors")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/objectives/red/errors"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.expr == nil {
		return localVarReturnValue, nil, reportError("expr is required and must be specified")
	}

	localVarQueryParams.Add("expr", parameterToString(*r.expr, ""))
	if r.grouping != nil {
		localVarQueryParams.Add("grouping", parameterToString(*r.grouping, ""))
	}
	if r.start != nil {
		localVarQueryParams.Add("start", parameterToString(*r.start, ""))
	}
	if r.end != nil {
		localVarQueryParams.Add("end", parameterToString(*r.end, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetREDRequestsRequest struct {
	ctx        context.Context
	ApiService *ObjectivesApiService
	expr       *string
	grouping   *string
	start      *int32
	end        *int32
}

func (r ApiGetREDRequestsRequest) Expr(expr string) ApiGetREDRequestsRequest {
	r.expr = &expr
	return r
}
func (r ApiGetREDRequestsRequest) Grouping(grouping string) ApiGetREDRequestsRequest {
	r.grouping = &grouping
	return r
}

// The timestamp to start the query range at
func (r ApiGetREDRequestsRequest) Start(start int32) ApiGetREDRequestsRequest {
	r.start = &start
	return r
}

// The timestamp to end the query range at
func (r ApiGetREDRequestsRequest) End(end int32) ApiGetREDRequestsRequest {
	r.end = &end
	return r
}

func (r ApiGetREDRequestsRequest) Execute() (*QueryRange, *http.Response, error) {
	return r.ApiService.GetREDRequestsExecute(r)
}

/*
GetREDRequests Get a matrix of requests by label

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetREDRequestsRequest
*/
func (a *ObjectivesApiService) GetREDRequests(ctx context.Context) ApiGetREDRequestsRequest {
	return ApiGetREDRequestsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return QueryRange
func (a *ObjectivesApiService) GetREDRequestsExecute(r ApiGetREDRequestsRequest) (*QueryRange, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *QueryRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectivesApiService.GetREDRequests")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/objectives/red/requests"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.expr == nil {
		return localVarReturnValue, nil, reportError("expr is required and must be specified")
	}

	localVarQueryParams.Add("expr", parameterToString(*r.expr, ""))
	if r.grouping != nil {
		localVarQueryParams.Add("grouping", parameterToString(*r.grouping, ""))
	}
	if r.start != nil {
		localVarQueryParams.Add("start", parameterToString(*r.start, ""))
	}
	if r.end != nil {
		localVarQueryParams.Add("end", parameterToString(*r.end, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListObjectivesRequest struct {
	ctx        context.Context
	ApiService *ObjectivesApiService
	expr       *string
}

func (r ApiListObjectivesRequest) Expr(expr string) ApiListObjectivesRequest {
	r.expr = &expr
	return r
}

func (r ApiListObjectivesRequest) Execute() ([]Objective, *http.Response, error) {
	return r.ApiService.ListObjectivesExecute(r)
}

/*
ListObjectives List Objectives

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListObjectivesRequest
*/
func (a *ObjectivesApiService) ListObjectives(ctx context.Context) ApiListObjectivesRequest {
	return ApiListObjectivesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return []Objective
func (a *ObjectivesApiService) ListObjectivesExecute(r ApiListObjectivesRequest) ([]Objective, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Objective
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectivesApiService.ListObjectives")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/objectives"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.expr != nil {
		localVarQueryParams.Add("expr", parameterToString(*r.expr, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
