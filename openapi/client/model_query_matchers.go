/*
Pyrra

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.3.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// QueryMatchers struct for QueryMatchers
type QueryMatchers struct {
	Name  *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
	Type  *int32  `json:"type,omitempty"`
}

// NewQueryMatchers instantiates a new QueryMatchers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryMatchers() *QueryMatchers {
	this := QueryMatchers{}
	return &this
}

// NewQueryMatchersWithDefaults instantiates a new QueryMatchers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryMatchersWithDefaults() *QueryMatchers {
	this := QueryMatchers{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *QueryMatchers) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryMatchers) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *QueryMatchers) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *QueryMatchers) SetName(v string) {
	o.Name = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *QueryMatchers) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryMatchers) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *QueryMatchers) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *QueryMatchers) SetValue(v string) {
	o.Value = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *QueryMatchers) GetType() int32 {
	if o == nil || o.Type == nil {
		var ret int32
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryMatchers) GetTypeOk() (*int32, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *QueryMatchers) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given int32 and assigns it to the Type field.
func (o *QueryMatchers) SetType(v int32) {
	o.Type = &v
}

func (o QueryMatchers) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableQueryMatchers struct {
	value *QueryMatchers
	isSet bool
}

func (v NullableQueryMatchers) Get() *QueryMatchers {
	return v.value
}

func (v *NullableQueryMatchers) Set(val *QueryMatchers) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryMatchers) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryMatchers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryMatchers(val *QueryMatchers) *NullableQueryMatchers {
	return &NullableQueryMatchers{value: val, isSet: true}
}

func (v NullableQueryMatchers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryMatchers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
